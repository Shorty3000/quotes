{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","length","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","onClick","HighlightedQuote","quote","author","QuoteDetails","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.75fcd1d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n    commentTextRef.current.value = \"\";\n    if (enteredText.length > 0) {\n      sendRequest({\n        commentData: {\n          text: enteredText,\n        },\n        quoteId: props.quoteId,\n      });\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && (!loadedComments || loadedComments.length === 0)) {\n    comments = <div className=\"centered\">No comments found</div>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst DUMMY_QUOTES = [\n  { id: \"q1\", author: \"Per\", text: \"This sucks!\" },\n  { id: \"q2\", author: \"Per\", text: \"This also sucks!\" },\n  { id: \"q3\", author: \"Per\", text: \"This too sucks!\" },\n];\n\nconst QuoteDetails = () => {\n  const match = useRouteMatch();\n  const params = useParams();\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (!loadedQuote.text) {\n    return <p>Quote not found</p>;\n  }\n\n  return (\n    <div>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={`${match.path}`} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </div>\n  );\n};\n\nexport default QuoteDetails;\n"],"sourceRoot":""}